#!/usr/bin/env bash

set -e # Exit immediately if a simple command exits with exit code >0
set -u # Report usage of any uninitialized variables.

usage() {
  cat <<USAGE
Usage:

  $0 <action> [options]

Actions:

  prepare        - Prepare environment for running automation.
  provision      - Provision jump box.
  centos-ami-ids - List latest centos-ami-ids (requires awscli)

USAGE
}

timestamp() { date +'%Y-%m-%dT%H:%M:%S%z'; }

log() { echo "[$(timestamp)]: $*" ; }

err() { log "[err] $*" >&2 ; }

fatal() { log "[fatal] $*" >&2 ; exit 1 ; }

tf_var() {
  terraform output -state="${STATE_FILE:-${PWD}/terraform.tfstate}" "${1}"
}

provider() {
  local _action="${1}"
  case "${_action}" in
    (show)
      show_instances
      ;;
    (shutdown)
      shutdown_instances
      ;;
    (*)
      fatal "Unknown provider action '${_action}', expected one of {centos-ami-ids,show,shutdown}"
      ;;
  esac
}

install_dependencies() {
  # for each binary we define a version, binary name, and version check.
  brew update
  check_install "Terraform v0.9.4" terraform "terraform -v"
  check_install jq-1.5 jq "jq --version"
  check_install 2.8.1 direnv "direnv version"
  echo "Dependencies checked or installed, proceed to next step."
}

check_install() {
  local _version=${1} _install=false _bin=${2} _check=${3}

  log "Checking for ${_bin} ... "
  if [[ `which ${_bin}` -eq 1 ]]
  then
    install=true
  else
    if [[ "${_check}" != "${_version}" ]]
    then
      _install=true
    fi
  fi

  if [[ ${_install} == true ]]
  then
    log "Installing ${_bin} ${_version} ..."
    brew install ${_bin}
    log "OK, ${_bin} ${_version} installed."
  else
    log "OK, ${_bin} is ${_version}"
  fi
}

check_install_terraform()  {
  local _version=0.9.4 _install=false

  log "Checking for terraform CLI ${_version} ..."
  if ! command -v terraform &>/dev/null
  then
    _install=true
  else
    if [[ "$(terraform -v | awk '/Terraform v/{print $2}')" != "v${_version}" ]]
    then
      _install=true
    fi
  fi

  if [[ ${_install} == true ]]
  then
    log "Installing terraform CLI ${_version} ..."
    curl -sOL "https://releases.hashicorp.com/terraform/${_version}/terraform_${_version}_darwin_amd64.zip"
    unzip -d "/usr/local/bin" "terraform_${_version}_darwin_amd64.zip"
    rm -f "terraform_${_version}_darwin_amd64.zip"
    log "OK, terraform CLI ${_version} installed."
  else
    log "OK, terraform CLI is ${_version}"
  fi
}

provision_vpc() {
  cd terraform/aws || fatal "Cannot cd terraform/aws!"

  local _action="${1}"

  case ${_action} in
    (plan)
      terraform get -update
      terraform plan -module-depth=-1 -var-file terraform.tfvars -out terraform.tfplan
      ;;
    (apply)
      terraform apply -var-file terraform.tfvars
      ;;
    (destroy)
      terraform plan -destroy -var-file terraform.tfvars -out terraform.tfplan
      terraform apply terraform.tfplan
      ;;
    (clean)
      rm -fR .terraform/ terraform.tfplan terraform.tfstate
      ;;
    (provision)
      provision
    (test)
      ../../scripts/test
      ;;
    (*)
      fatal "Unknown terraform action '${_action}', expected one of {plan,apply,destroy,clean}"
      ;;
  esac
}

bastion() {
  local _bastionIP _keyPath

  cd terraform/aws || fatal "Cannot cd to terraform/aws!"

  _bastionIP="$(tf_var bastion_ip)"
  _keyPath="$(sed -e "s#^~#${HOME}#" < <(tf_var aws_key_path))"

  local _action="${1}"
  case "${_action}" in
    (ip)  echo "${_bastionIP}" ;;
    (ssh) ssh -i "${_keyPath}" centos@"${_bastionIP}" ;;
    (*)
      fatal "Unknown terraform action '${_action}', expected one of {plan,apply,destroy,clean}"
      ;;
  esac
}

replace() {
  local _fileName="$1" _searchString="$2" _replaceString="$3"

  local _regex="s#${_searchString}#${_replaceString}#"

  if [[ "$(uname -s)" == "Darwin" ]]
  then #Detect OSX v other linux for sed ''
    sed -i '' "${_regex}" "${_fileName}" ||
      fatal "Could not execute execute sed command replace ${_searchString} with ${_replaceString }in file ${_fileName}, terminating install."
  else
    sed -i "${_regex}" "${_fileName}" ||
      fatal "Could not execute execute sed command replace ${_searchString} with ${_replaceString} in file ${_fileName}, terminating install."
  fi
}

prepare_bastion_provision_script() {
  local _src="${PWD}/../../scripts/provision-bastion" \
    _tmp="/tmp/provision-bastion"

  cp "${_src}" "${_tmp}" || fatal "Error copying ${_src} to ${_tmp}"

  replace "${_tmp}" '^awsKeyID=.*' "awsKeyID=\"$(tf_var aws_access_key)\""
  replace "${_tmp}" '^awsAccessKey=.*' "awsAccessKey=\"$(tf_var aws_secret_key)\""
  replace "${_tmp}" '^awsRegion=.*' "awsRegion=\"$(tf_var aws_region)\""
  replace "${_tmp}" '^awsVPC=.*' "awsVPC=\"$(tf_var aws_vpc_id)\""
  replace "${_tmp}" '^boshSubnet=.*' "boshSubnet=\"$(tf_var bosh_subnet)\""
  replace "${_tmp}" '^boshInitVersion=.*' "boshInitVersion=\"$(tf_var bosh_init_version)\""
  replace "${_tmp}" '^network=.*' "network=\"$(tf_var network)\""
  replace "${_tmp}" '^cfIP=.*' "cfIP=\"$(tf_var cf_api_ip)\""
  replace "${_tmp}" '^cfSubnet1=.*' "cfSubnet1=\"$(tf_var cf_subnet1)\""
  replace "${_tmp}" '^cfSubnet1AZ=.*' "cfSubnet1AZ=\"$(tf_var cf_subnet1_az)\""
  replace "${_tmp}" '^cfSubnet2=.*' "cfSubnet2=\"$(tf_var cf_subnet2)\""
  replace "${_tmp}" '^cfSubnet2AZ=.*' "cfSubnet2AZ=\"$(tf_var cf_subnet2_az)\""
  replace "${_tmp}" '^bastionAZ=.*' "bastionAZ=\"$(tf_var bastion_az)\""
  replace "${_tmp}" '^bastionID=.*' "bastionID=\"$(tf_var bastion_id)\""
  replace "${_tmp}" '^lbSubnet1=.*' "lbSubnet1=\"$(tf_var lb_subnet1)\""
  replace "${_tmp}" '^cfSecurityGroup=.*' "cfSecurityGroup=\"$(tf_var cf_sg)\""
  replace "${_tmp}" '^cfAdminPass=.*' "cfAdminPass=\"$(tf_var cf_admin_pass)\""
  replace "${_tmp}" '^cfDomain=.*' "cfDomain=\"$(tf_var cf_domain)\""
  replace "${_tmp}" '^cfSize=.*' "cfSize=\"$(tf_var cf_size)\""
  replace "${_tmp}" '^dockerSubnet=.*' "dockerSubnet=\"$(tf_var docker_subnet)\""
  replace "${_tmp}" '^installDocker=.*' "installDocker=\"$(tf_var install_docker_services)\""
  replace "${_tmp}" '^cfReleaseVersion=.*' "cfReleaseVersion=\"$(tf_var cf_release_version)\""
  replace "${_tmp}" '^debug=.*' "debug=\"$(tf_var debug)\""
  replace "${_tmp}" '^privateDomains=.*' "privateDomains=\"$(tf_var cf_private_domains)\""
  replace "${_tmp}" '^cfSecurityGroupAllows=.*' "cfSecurityGroupAllows=\"$(tf_var additional_cf_sg_allows)\""
  replace "${_tmp}" '^cfRunSubdomain=.*' "cfRunSubdomain=\"$(tf_var cf_run_subdomain)\""
  replace "${_tmp}" '^cfAppsSubdomain=.*' "cfAppsSubdomain=\"$(tf_var cf_apps_subdomain)\""
  replace "${_tmp}" '^cfPass=.*' "cfPass=\"$(tf_var cf_pass)\""
#  replace "${_tmp}" '^cfBOSHUbuntuStemCell=.*' "cfPass=\"$(tf_var cf_bosh_ubuntu_stem_cell)\""

  for _job in backbone api services health runner
  do
    for _zone in Z1 Z2
    do
      local _jobName _lcJobName _key _value
      _jobName="${_job}_${_zone}_count"
      _lcJobName="$(tr '[:upper:]' '[:lower:]' <<< "${_jobName}")"
      _key="${_job}Count${_zone}"
      _value="$(tf_var "${_lcJobName}")"

      replace "${_tmp}" "${_key}=.*" "${_key}=\"${_value}\""
    done
  done

  for _job in data public_HAProxy private_HAProxy backbone api services health runner
  do
    local _lcJobName _value _key
    _lcJobName=$(tr '[:upper:]' '[:lower:]' <<<"${_job}")
    _value=$(tf_var "${_lcJobName}_resource_pool")
    _key="${_job//_/}Pool"

    replace "${_tmp}" "${_key}=.*" "${_key}=\"${_value}\""
  done
}

prepare_bosh_yaml_manifest() {
  local _src _tmp

  _src="${PWD}/../../config/aws/bosh.yml"
  _tmp="/tmp/bosh.yml"

  cp "${_src}" "${_tmp}" || fatal "Error copying ${_src} to ${_tmp}"

  replace "${_tmp}" "\${bosh-version}" "$(tf_var "bosh_version")"
  replace "${_tmp}" "\${bosh-sha1}" "$(tf_var "bosh_sha1")"
  replace "${_tmp}" "\${bosh-aws_cpi_version}" "$(tf_var "bosh_aws_cpi_version")"
  replace "${_tmp}" "\${bosh-aws_cpi_sha1}" "$(tf_var "bosh_aws_cpi_sha1")"
  replace "${_tmp}" "\${bosh-director_vm_size}" "$(tf_var "bosh_director_vm_size")"
  replace "${_tmp}" "\${bosh-subnet}" "$(tf_var "bosh_subnet")"
  replace "${_tmp}" "\${bosh-az}" "$(tf_var "aws_subnet_bastion_az")"
  replace "${_tmp}" "\${network}" "$(tf_var "network")"
  replace "${_tmp}" "\${centos_stemcell_version}" "$(tf_var "centos_stemcell_version")"
  replace "${_tmp}" "\${centos_stemcell_sha1}" "$(tf_var "centos_stemcell_sha1")"
  replace "${_tmp}" "\${aws-access_key}" "$(tf_var "aws_access_key")"
  replace "${_tmp}" "\${aws-secret_key}" "$(tf_var "aws_secret_key")"
  replace "${_tmp}" "\${aws-key_name}" "$(tf_var "aws_key_name")"
  replace "${_tmp}" "\${aws-region}" "$(tf_var "aws_region")"
  replace "${_tmp}" "\${aws-public-ip}" "$(tf_var "cf_api_ip")"
  replace "${_tmp}" "\${aws-security-group}" "$(tf_var "cf_sg_id")"
}

prepare_cf_tiny_yaml_manifest() {
  local _src _tmp _size

  _size="$(tf_var "cf_size")"
  _src="${PWD}/../../config/aws/cf-${_size}.yml"
  _tmp="/tmp/cf-${_size}.yml"

  cp "${_src}" "${_tmp}" || fatal "Error copying ${_src} to ${_tmp}"

  replace "${_tmp}" "\${cf-release-version}" "$(tf_var "cf_release_version")"
  replace "${_tmp}" "\${cf-etcd-version}" "$(tf_var "cf_etcd_version")"
  replace "${_tmp}" "\${cf-haproxy-version}" "$(tf_var "cf_haproxy_version")"
#  replace "${_tmp}" "\${cf-domain}" "$(tf_var "cf_domain")"  # Handled in provision instead
  replace "${_tmp}" "\${cf-admin-pass}" "$(tf_var "cf_admin_pass")"
  replace "${_tmp}" "\${cf-subnet1}" "$(tf_var "cf_subnet1")"
  replace "${_tmp}" "\${cf-subnet2}" "$(tf_var "cf_subnet2")"
  replace "${_tmp}" "\${lb-subnet1}" "$(tf_var "bosh_subnet")"
  replace "${_tmp}" "\${bastion-az}" "$(tf_var "aws_subnet_bastion_az")"
  replace "${_tmp}" "\${cf-private-domains}" "$(tf_var "cf_private_domains")"
  replace "${_tmp}" "\${cf-ip}" "$(tf_var "cf_api_ip")"
  replace "${_tmp}" "\${cf-sg}" "$(tf_var "cf_sg")"
  replace "${_tmp}" "\${cf-network}" "$(tf_var "network")"
  replace "${_tmp}" "\${cf-pass}" "$(tf_var "cf_pass")"
  replace "${_tmp}" "\${cf-size}" "$(tf_var "cf_size")"
  replace "${_tmp}" "\${bastion-subnet}" "$(tf_var "aws_subnet_bastion")"
}

scp_file() {
  local _src _dest _index _maxAttempts  _sleepSeconds _bastionIP _keyPath

  _bastionIP="$(tf_var bastion_ip)"
  _keyPath="$(sed -e "s#^~#${HOME}#" < <(tf_var aws_key_path))"

  _src="${1}"
  _dest="${2}"
  _index=1
  _maxAttempts=10
  _sleepSeconds=10

  while (( _index <= _maxAttempts ))
  do
    echo "Attempting to scp to centos@${_bastionIP}... (${_index}/${_maxAttempts})"
    ssh -o StrictHostKeyChecking=no -i "${_keyPath}" "centos@${_bastionIP}" \
      "[[ -d deployments ]] || mkdir -p deployments"
    ssh -o StrictHostKeyChecking=no -i "${_keyPath}" "centos@${_bastionIP}" \
      "[[ -d workspace/deployments ]] || mkdir -p workspace/deployments"
    scp -o StrictHostKeyChecking=no -i "${_keyPath}" "${_src}" "centos@${_bastionIP}:${_dest}"
    case $? in
      (0) echo "${_index}> Success"; break ;;
      (*) echo "${_index} of ${_maxAttempts}> Bastion SSH server not ready yet, waiting ${_sleepSeconds} seconds..." ;;
    esac
    sleep "${_sleepSeconds}"
    ((index += 1))
  done
}

provision() {
  local _bastionIP _keyPath _action _cmd _size

  cd terraform/aws || fatal "Cannot cd to terraform/aws!"

  _action="${1:-}"
  _bastionIP="$(tf_var bastion_ip)"
  _size="$(tf_var cf_size)"
  _keyPath="$(sed -e "s#^~#${HOME}#" < <(tf_var aws_key_path))"

  prepare_bastion_provision_script # Wait until SSH on Bastion server is working
  scp_file "/tmp/provision-bastion" "provision"

  _cmd="mkdir -p ~/.ssh ; chmod 0755 ~/.ssh"
  ssh -t -i "${_keyPath}" centos@"${_bastionIP}" "${_cmd}"

  # runs from terraform/aws/ so we need the ../..
  for file in ../../sshkeys/*.pem
  do
    fileName="$(basename ${file})"

    echo "scping ${file} to ~/.ssh/${fileName}"
    scp_file "${file}" ".ssh/${fileName}"

    _cmd="chmod 0644 ~/.ssh/${fileName}"
    ssh -t -i "${_keyPath}" centos@"${_bastionIP}" "${_cmd}"
  done

	_cmd="chmod +x \${HOME}/provision"
  ssh -t -i "${_keyPath}" centos@"${_bastionIP}" "${_cmd}"

  prepare_bosh_yaml_manifest
  scp_file "/tmp/bosh.yml" "deployments/bosh.yml"

  prepare_cf_tiny_yaml_manifest
  scp_file "/tmp/cf-${_size}.yml" "deployments/cf-${_size}.yml"

	_cmd="DEBUG=true \${HOME}/provision ${_action}"
  ssh -t -i "${_keyPath}" centos@"${_bastionIP}" "${_cmd}"
}

find_centos_7_ami_ids() {
  regions=(
    us-east-1
    us-west-1
    us-west-2
    ap-northeast-1
    ap-northeast-2
    ap-southeast-1
    ap-southeast-2
    eu-west-1
    sa-east-1
  )

  productCode="aw0evgkw8e5c1q413zgy5pjce" # Product Code for CentOS 7
  for region in "${regions[@]}"
  do
    printf "${region} = $( jq '.Images[0].ImageId' <(
    aws --region "${region}" ec2 describe-images --owners aws-marketplace \
    --filters Name=product-code,Values="${productCode}")
    )\n"
  done
}

show_instances() {
  if [[ $# -eq 0 ]]; then
    aws ec2 describe-tags | jq -r -c '.Tags[] | select (.Key | contains("Name")) | select (.ResourceType | contains("instance")) '
  else
    aws ec2 describe-tags | jq -r '.Tags[] | select (.Key | contains("Name")) | select (.ResourceType | contains("instance"))  | .ResourceId ' > ${1}
  fi
}

shutdown_instances() {
  show_instances instance_list
  cat instance_list
  echo "You are about to terminate the above the instances."
  echo "WARNING:  This may include instances booted outside of Terraform.  Please double check the list if needed"
  read -r -p "Are you sure? [y/N] " response
  if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
  then
    IFS=$'\n'  # make newlines the separator
    for i in `cat ./instance_list`; do
      echo "Shutting down $i"
      aws ec2 terminate-instances --instance-ids $i
    done
  else
    echo "Nothing shutdown, exiting..."
  fi
  unset IFS
}

main() {
  [[ -z "${DEBUG:-}" ]] || set -x

  action="$1"
  shift || true
  case "${action}" in
    (centos-ami-ids)
      find_centos_7_ami_ids "$@"
      ;;
    (bastion)
      bastion "$@"
      ;;
    (install-dependencies)
      install_dependencies
      ;;
    (prepare)
      check_install_terraform
      ;;
    (provider)
      provider "$@"
      ;;
    (provision)
      provision "$@"
      ;;
    (vpc)
      provision_vpc "$@"
      ;;
    (*|help|-h)
      usage
      ;;
  esac
}

main "${@-help}"

exit $?
